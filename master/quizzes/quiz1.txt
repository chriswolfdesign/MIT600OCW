# Quiz 1
# Name: Chris Wolf
# E-mail: chriswolfdesign@gmail.com
# Time: 1:30

-------------------------------------------------------------------------------
Problem 1 - Are each of the following True of False
-------------------------------------------------------------------------------

1.1) In Python the values of a dict must be immutable.
	
	False - The keys of a dict must be immutable but the values can be
	of any data type the programmer chooses.

1.2) There exist problems that cannot be solved in Python without using either
	 iteration or recursion.

	 True - There are some aspects of programming that Python is too high-level
	 to complete.

1.3) Floating point arithmetic behaves exactly like normal arithmetic on real
	 numbers.

	 False - Unfortunately, computers comprehend all numbers differently than
	 humans, especially floating point values.  Due to (most) human cultures
	 thinking in base 10 and computers thinking in base 2, there are times 
	 where floating point values are "lost in translation."  Therefore, we 
	 must be very careful when computing with floating point values.

1.4) On all inputs, a bisection search will run faster than a linear search.

	 False - Bisection search is a very powerful tool because it cuts down 
	 runtime greatly for higher amounts of data.  However, it also must perform
	 these actions, even on smaller amounts of data.  Occassionally, you will
	 find situations where the time these actions took would have taken longer
	 than simply searching with a linear algorithm.  Most times, however, such
	 small amounts of data take such little time to search through, the
	 sacrifice is neglible.

1.5) Let L be a list, each element of which is a list of ints.  In Python,
	 the assignemtn statement L[0][0] = 3 mutates the list L.

	 False - It appears that the list L is being mutated.  However, because
	 L is a list of lists, only the list L[0] is being mutated.  If the
	 question asked if L[0] = 3 mutates L, the answer would be true.  Very
	 tricky question...

-------------------------------------------------------------------------------
Problem 2 - What does the following code print? 
-------------------------------------------------------------------------------

T = (0.1, 0.1)
x = 0.0
for i in range(len(T)):
	for j in T:
		x += i + j
		print x
print i

0.1
0.2
1.3
2.4
1

-------------------------------------------------------------------------------
Problem 3 - What does the following code print?
-------------------------------------------------------------------------------

def f(s):
	if len(s) <= 1:
		return s
	return f(f(s[1:])) + s[0] #Note double recursion

print f('mat')
print f('math')

# Solution for print f('mat')
atm

# Solution for print f('math')
hatm

-------------------------------------------------------------------------------
Problem 4 - Implement the body of the function specified in the box.
-------------------------------------------------------------------------------

"""
Box Start
"""
def findAll(wordList, lStr):
	"""assumes: wordList is a list of words in lowercase.
				lStr is a str of lowercase letters.
				No letter occurs in lStr more than once
	   returns: a list of all the words in wordList that contain each
	   			of the letters in lStr exactly once and no letters not in 
				lStr"""
"""
Box End
"""

def findAll(wordList, lStr):
	"""assumes: wordList is a list of words in lowercase.
				lStr is a str of lower case letters.
				No letter occurs in lSTr more than once
	   returns: a list of all the words in wordList that contain each
	   			of the letters in lStr exactly once and no letters not in
				lSTr"""
	
	possible_words = []
	letters = sorted(lStr)
	for word in wordList:
		sorted_letters = sorted(word)
		if sorted_letters == letters:
			possible_words.append(word)
	return result

-------------------------------------------------------------------------------
Problem 5 - The following code does not meet its specification.  Corect it.
-------------------------------------------------------------------------------

"""
Distro code Start
"""
def addVectors(v1, v2):
	"""assumes v1 and v2 are lists of ints.
	   Returns a list containing the pointwise sum of the elements in v1 and
	   v2.  For example, addVectors([4,5], [1,2,3]) returns [5,7,3], and 
	   addVectors([], []) returns [].  Does not modify inputs."""
	if len(v1) > len(v2):
		result = v1
		other = v2
	else:
		result = v2
		other = v1
	for i in range(len(other)):
		result[i] += other[i]
	return result
"""
Distro code End
"""

def addVectors(v1, v2):
	"""assumes v1 and v2 are lists of ints.
	   Returns a list containing the pointwise sum of the elements in v1 and
	   v2.  For example, addVectors([4,5], [1,2,3]) returns [5,7,3], and 
	   addVectors([], []) returns [].  Does not modify inputs."""

	if len(v1) > len(v2):
		result = v1[:]
		other  = v2
	else:
		result = v2[:]
		other  = v1
	
	for i in range(len(other)):
		result[i] += other[i]
	
	return result

-------------------------------------------------------------------------------
Problem 6 - Consider the following code:
-------------------------------------------------------------------------------

def f(s, d):
	for k in d.keys():
		d[k] = 0
	for c in s:
		if c in d:
			d[c] += 1
		else: d[c] = 0
	return d

def addUp(d):
	result = 0
	for k in d:
		result += d[k]
	return result

d1 = {}
d2 = d1
d1 = f('abbc', d1)
print addUp(d1)
d2 = f('bbcaa', d2)
print addUp(d2)
print f('', {})
print result

6.1) What does it print?

	 1
	 5
	 {}

6.2) Does it terminate normally?  Why or why not?

	 No, it would terminate with an error because result only exists in the 
	 scope of the functions, but is printed procedurally.

-------------------------------------------------------------------------------
Problem 7 - Consider the following code:
-------------------------------------------------------------------------------

def logBase2(n):
	"""assumes that n is a positive int
	   returns a float that approximates the log base 2 of n"""
	import math
	return math.log(n, 2)

def f(n):
	"""assumes n is an int"""
	if n < 1:
		return
	curDigit = int(logBase2(n))
	ans = 'n = '
	while curDigit >= 0:
		if n%(2**curDigit) < n:
			ans = ans + '1'
			n = n - 2**curDigit
		else:
			ans = ans + '0'
		curDigit -= 1
	return ans

for i in range(3);
	print f(i)

7.1) What does it print?
	 None
	 n = 0
	 n = 1

7.2) Under the assumption that logBase2 is O(n), what is the order (use big
	 Oh notation) of f?

	 O(n)

-------------------------------------------------------------------------------
Problem 8 - Next to each item in the left column write the letter labeling
			the item in the right column that best matches the item in the 
			left column.  NO item in the right column should be used more
			than once.
-------------------------------------------------------------------------------

Big O notation										a) induction

Newton's Method										b) upper bound

Recursion											c) lower bound
	
													d) approximation
													
													e) expected running time

													f) exponential

Big O Notation  - b) upperbound

Newton's Method - d) approximation

Recursion       - a) induction

-------------------------------------------------------------------------------
Problem 9 - Do you think that the lectures are too slow paced, too fast paced,
			about right?
-------------------------------------------------------------------------------

I think the lectures are a bit too fast paced.  They probably work out very
well for student's taking the class at MIT as they can attend office hours
and ask questions.  I wish we had a set-up similar to Harvard's CS50 where
there is a Facebook page where online students can ask questions.  It feels
a bit frustrating not having anybody to turn to for help with this material.

-------------------------------------------------------------------------------
Problem 10 - Do you think that the problem sets are too short, too long,
			 about right?
-------------------------------------------------------------------------------

The length isn't as big of a problem as the difficulty.  Again, it's probably
about right for MIT students but not having anybody to look towards for help
can be very discouraging.
